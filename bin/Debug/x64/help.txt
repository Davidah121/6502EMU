6502 Emu
Version 0.1
Last Modified 05-05-2021

This document outlines all information regarding the 6502 Emu application pertaining to its functionality.
It is separated into the following secitions:
	INITIALIZATION
	MEMORY
	INSTRUCTIONS
	DEBUGGER
	KNOWN ISSUES
/////////////////////////////////////////////////////////////////////
/////////////// INITIALIZATION /////////////////////////
///////////////////////////////////////////////////////////////////

When the application initializes, the program counter (PC) for the processor is set to 0x0600.
The stack pointer (SP) is set to 0xFF and execution starts.
Instructions are loaded from a preset file 6502.a.
Replace the contents in the file with code that you desire to run through the emulator.
The format should be raw binary data and not ascii strings or 6502 assembly syntaxed strings.
This program is not a compiler or assembler.

/////////////////////////////////////////////////////////////////////
/////////////// MEMORY ////////////////////////////////////
///////////////////////////////////////////////////////////////////

The memory for the 6502 Emu application is designed to fit within the limits of the 6502 processor.
Memory is separated into pools to allow more than 65536 bytes of memory.
Each pool contains 65536 bytes of memory and memory access is done a byte at a time.
The byte that is returned is a reference instead of a copy.
Memory pools must be selected separately and is hidden from normal memory access.
Timings are maintained by the processors accessing the data.

/////////////////////////////////////////////////////////////////////
/////////////// INSTRUCTIONS ///////////////////////////
///////////////////////////////////////////////////////////////////

Most of the instructions for a 6502 are implemented.
The instructions that are not implemented are either invalid instructions or not documented.
These instructions will be added at a later date.
The BRK instruction currently ends all execution.
	Note that it has an implementation but documentation states that it is handled differently
	depending on the OS. In this case, I have chosen to end execution.
If an instruction is used that is not implemented or invalid, it ends all execution.

/////////////////////////////////////////////////////////////////////
/////////////// DEBUGGER /////////////////////////////////
///////////////////////////////////////////////////////////////////

The debugger can be enabled to step through each part of the code and view the
	processor flags, registers, and cycles used.
Note that the application will not end when the code has been completely executed.
This allows the user to dump memory and view the number of cycles used.

The following commands are valid:
	help
	step
	run
	end
	mem_dump
	mem_view

help		Opens this file
step		Performs the next instruction. 
run		Runs the program without interruptions till completion.
end 		Prematurely ends execution and quits the program.
mem_dump 	Dumps all of the memory to a file called mem_dump.
mem_view	Prints the value(s) of memory at a location or range of locations.

After every command, the command prompt is cleared.

/////////////////////////////////////////////////////////////////////
/////////////// KNOWN ISSUES //////////////////////////
///////////////////////////////////////////////////////////////////

The command prompt is cleared using cls which is not cross platform.
	It will fail to work on other platforms unless changed.
	The command pause is similar in nature.

The application when run through VSCode using lldb as a debugger freaks out due
to using cls.

The application is dependant on GLIB however that is easy to change at the current state
	due to it just using simple functions or wrappers.